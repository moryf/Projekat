; This is the Calva REPL Window.
; It's just a file, really, with some special treatment from Calva.
; Use it as a REPL input prompt if you like. (When the REPL is connected.)
; TIPS: The keyboard shortcut `ctrl+alt+o r` shows and focuses this window
; Please see https://calva.io/repl-window/ for more info.
; Happy coding! ♥️

; TIPS: As with any Clojure file when the REPL is connected:
; - `alt+enter` evaluates the current top level form.
; - `ctrl+enter` evaluates the current form.
; Special for this file:
; - `alt+up` and `alt+down` traverse up and down the REPL command history
;    when the cursor is after the last contents at the prompt
; 
; See also the Calva Inspector: https://calva.io/inspector/

PLEASE NOTE
We will update the default location of this file.
The new default location will be
  "<projectRootPath>/.calva/repl.calva-repl"
For now the legacy path is used by default.
To give yourself a smooth transition, you can opt in
to the change, by configuring this setting as false:
  "calva.useLegacyReplWindowPath"
and then add "**/.calva/repl.calva-repl" to your ".gitignore" file.


This file is configured as the output destination for all REPL output.
You can configure this with the setting:
  "calva.outputDestinations"


; Jacking in...
; Connecting using "Leiningen" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Starting Jack-in: pushd c:\Users\aleks\OneDrive\Dokumenti\fax\master\clojure\Projekat\projekat & cmd.exe /d /c lein update-in :dependencies conj [nrepl,"1.1.1"] -- update-in :plugins conj [cider/cider-nrepl,"0.47.1"] -- update-in [:repl-options,:nrepl-middleware] conj '["cider.nrepl/cider-middleware"]' -- with-profile +uberjar repl :headless & popd
; Using host:port 127.0.0.1:62233 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉projekat.core꞉> 
"Please see https://calva.io/output/#about-stdout-in-the-repl-window
about why stdout printed to this file is prepended with `;` to be line comments."
clj꞉projekat.core꞉> 
; Jack-in done.
clj꞉projekat.core꞉> 
nil
clj꞉projekat.core꞉> 
nil
clj꞉projekat.core꞉> 
#'projekat.core/sigmoid
clj꞉projekat.core꞉> 
#'projekat.core/sigmoid-derivative
clj꞉projekat.core꞉> 
#'projekat.core/tanh
clj꞉projekat.core꞉> 
#'projekat.core/tanh-derivative
clj꞉projekat.core꞉> 
#'projekat.core/r-w
clj꞉projekat.core꞉> 
projekat.core.Neuron
clj꞉projekat.core꞉> 
#'projekat.core/create-neuron
clj꞉projekat.core꞉> 
#'projekat.core/feed-forward
clj꞉projekat.core꞉> 
#'projekat.core/back-propagation
clj꞉projekat.core꞉> 
projekat.core.Layer
clj꞉projekat.core꞉> 
#'projekat.core/create-layer
clj꞉projekat.core꞉> 
#'projekat.core/feed-forward-layer
clj꞉projekat.core꞉> 
(0.05018499994116814)
clj꞉projekat.core꞉> 
(0.9826383063565274)
clj꞉projekat.core꞉> 
(0.9999999990374011)
clj꞉projekat.core꞉> 
#'projekat.core/create-neuron-with-weights
clj꞉projekat.core꞉> 
#'projekat.core/back-propagation
clj꞉projekat.core꞉> 
projekat.core.Layer
clj꞉projekat.core꞉> 
#'projekat.core/create-layer
clj꞉projekat.core꞉> 
#'projekat.core/feed-forward-layer
clj꞉projekat.core꞉> 
projekat.core.Network
clj꞉projekat.core꞉> 
{:input-size 2, :weights [0.5 0.5], :activation-func :sigmoid}
clj꞉projekat.core꞉> 
0.6224593312018546
clj꞉projekat.core꞉> 
0.6224593312018546
clj꞉projekat.core꞉> 
0.8175744761936437
clj꞉projekat.core꞉> 
0.8175744761936437
clj꞉projekat.core꞉> 
0.8175744761936437
clj꞉projekat.core꞉> 
0.8175744761936437
clj꞉projekat.core꞉> 
0.9525741268224331
clj꞉projekat.core꞉> 
0.9525741268224331
clj꞉projekat.core꞉> 
#'projekat.core/layers
clj꞉projekat.core꞉> 
#'projekat.core/create-network
clj꞉projekat.core꞉> 
#'projekat.core/nn
clj꞉projekat.core꞉> 
; #projekat.core.Network{:layers [#projekat.core.Layer{:neurons [#projekat.core.Neuron{:input-size 2, :weights [-0.41598570074981867 0.007208082795724602], :activation-func :sigmoid} #projekat.core.Neuron{:input-size 2, :weights [0.31700365268390507 -0.49131519913377897], :activation-func :sigmoid}]} #projekat.core.Layer{:neurons [#projekat.core.Neuron{:input-size 2, :weights [-0.9019375792860105 -0.83894382435979], :activation-func :sigmoid}]}]}
nil
clj꞉projekat.core꞉> 
; #projekat.core.Network{:layers [#projekat.core.Layer{:neurons [#projekat.core.Neuron{:input-size 2, :weights [-0.41598570074981867 0.007208082795724602], :activation-func :sigmoid} #projekat.core.Neuron{:input-size 2, :weights [0.31700365268390507 -0.49131519913377897], :activation-func :sigmoid}]} #projekat.core.Layer{:neurons [#projekat.core.Neuron{:input-size 2, :weights [-0.9019375792860105 -0.83894382435979], :activation-func :sigmoid}]}]}
nil
clj꞉projekat.core꞉> 
; Execution error (ClassCastException) at projekat.core/eval10483 (form-init6090775994257226788.clj:66).
; class projekat.core.Network cannot be cast to class clojure.lang.IFn (projekat.core.Network is in unnamed module of loader clojure.lang.DynamicClassLoader @10d0a775; clojure.lang.IFn is in unnamed module of loader 'app')
clj꞉projekat.core꞉> 
{:layers
 [{:neurons
   [{:input-size 2, :weights [-0.41598570074981867 0.007208082795724602], :activation-func :sigmoid}
    {:input-size 2, :weights [0.31700365268390507 -0.49131519913377897], :activation-func :sigmoid}]}
  {:neurons [{:input-size 2, :weights [-0.9019375792860105 -0.83894382435979], :activation-func :sigmoid}]}]}
clj꞉projekat.core꞉> 
#'projekat.core/feed-forward-network
clj꞉projekat.core꞉> 
; Syntax error compiling at (c:\Users\aleks\OneDrive\Dokumenti\fax\master\clojure\Projekat\projekat\src\projekat\core.clj:81:44).
; Unable to resolve symbol: back-propagation-layer in this context
clj꞉projekat.core꞉> 
#'projekat.core/back-propagation-layer
clj꞉projekat.core꞉> 
projekat.core.Network
clj꞉projekat.core꞉> 
#'projekat.core/layers
clj꞉projekat.core꞉> 
#'projekat.core/create-network
clj꞉projekat.core꞉> 
#'projekat.core/nn
clj꞉projekat.core꞉> 
#'projekat.core/feed-forward-network
clj꞉projekat.core꞉> 
#'projekat.core/back-propagation-network
clj꞉projekat.core꞉> 
#'projekat.core/train-network
clj꞉projekat.core꞉> 
#'projekat.core/training-data
clj꞉projekat.core꞉> 
#'projekat.core/nn
clj꞉projekat.core꞉> 
; Execution error (IllegalArgumentException) at projekat.core/back-propagation-network (form-init6090775994257226788.clj:73).
; Don't know how to create ISeq from: java.lang.Long
clj꞉projekat.core꞉> 
#'projekat.core/create-layer
clj꞉projekat.core꞉> 
; Execution error (ClassCastException) at projekat.core/create-layer (form-init6090775994257226788.clj:56).
; class projekat.core.Neuron cannot be cast to class clojure.lang.IFn (projekat.core.Neuron is in unnamed module of loader clojure.lang.DynamicClassLoader @115bea26; clojure.lang.IFn is in unnamed module of loader 'app')
clj꞉projekat.core꞉> 
nil
clj꞉projekat.core꞉> 
#'projekat.core/sigmoid
clj꞉projekat.core꞉> 
#'projekat.core/sigmoid-derivative
clj꞉projekat.core꞉> 
#'projekat.core/tanh
clj꞉projekat.core꞉> 
#'projekat.core/tanh-derivative
clj꞉projekat.core꞉> 
#'projekat.core/r-w
clj꞉projekat.core꞉> 
projekat.core.Neuron
clj꞉projekat.core꞉> 
#'projekat.core/create-neuron
clj꞉projekat.core꞉> 
#'projekat.core/create-neuron-with-weights
clj꞉projekat.core꞉> 
#'projekat.core/feed-forward
clj꞉projekat.core꞉> 
#'projekat.core/back-propagation
clj꞉projekat.core꞉> 
projekat.core.Layer
clj꞉projekat.core꞉> 
#'projekat.core/create-layer
clj꞉projekat.core꞉> 
; Execution error (ClassCastException) at projekat.core/create-layer (form-init6090775994257226788.clj:56).
; class projekat.core.Neuron cannot be cast to class clojure.lang.IFn (projekat.core.Neuron is in unnamed module of loader clojure.lang.DynamicClassLoader @6dc7412a; clojure.lang.IFn is in unnamed module of loader 'app')
clj꞉projekat.core꞉> 
